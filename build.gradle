buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "de.dfki.mary:marytts-client:5.2"
    }
}

plugins {
    id "de.dfki.mary.voicebuilding-legacy" version "5.2.0"
    id "de.undercouch.download" version "3.2.0"
}

//apply plugin: 'java'

repositories {
    jcenter()
}

group 'de.uni-saarland.voicebuilding.group2'
version '0.1-SNAPSHOT'

//sourceCompatibility = 1.8

import de.undercouch.gradle.tasks.download.Download
import groovy.io.FileType
import marytts.util.data.audio.MaryAudioUtils
import marytts.util.dom.MaryDomUtils

def scriptDir = "$rootDir/scripts"
def dataURL = "https://github.com/ioonaa/voice-ktn-data/archive/master.zip"
def dataZip = "$buildDir/data.zip"
def flacURL = "https://github.com/ioonaa/voice-ktn-data/releases/download/0.1/voice-ktn.flac"
def flacPath = "$buildDir/ktn-voice.flac"
def yamlPath = "$buildDir/voice-ktn.yaml"

task downloadData(type: Download) {
    src dataURL
    dest dataZip
    overwrite false
    onlyIfNewer true
}

task downloadFlac(type: Download) {
    src flacURL
    dest flacPath
    overwrite false
}

task extractChronoTG (type: Copy) {
    dependsOn downloadData
    from zipTree(dataZip), {
        include '**/voice-ktn-chrono.TextGrid'
        eachFile {
            it.path = it.name
        }
    }
    into "$buildDir/"
}

    task createYaml {
    dependsOn extractChronoTG
    doLast {
        exec {
            def script = file("$scriptDir/tg_to_yaml.praat")
            commandLine "praat", "--run", script, "$buildDir/voice-ktn-chrono.TextGrid", "$buildDir/voice-ktn.yaml"
        }
    }
}

task extractWav {
    dependsOn downloadFlac, createYaml
    outputs.dir "$buildDir/wav/"
    /* write that Python must be installed */
    doLast {
        file("$buildDir/wav").mkdir()
        exec {
            commandLine "python", file("$scriptDir/yaml_cut_wav_1616.py"), file(yamlPath), file(flacPath)
        }
        file("$rootDir/").eachFileMatch(FileType.FILES, ~/.*\.wav/) { wavfile ->
            def filename = wavfile.name//.lastIndexOf('.').with { it != -1 ? wavfile.name[0 ..< it] : wavfile.name }
            file(wavfile).renameTo(file("$buildDir/wav/$filename"))
        }
        file("$rootDir/").eachFileMatch(FileType.FILES, ~/.*\.flac/) { flacfile ->
            file(flacfile).delete()
        }
    }
}

task extractTxt(type: Copy) {
    dependsOn downloadData
    from zipTree(dataZip), {
        include '**/text/*.txt'
        eachFile {
            it.path = it.name
        }
    }
    into "$buildDir/text"
}

task extractTG(type: Copy) {
    dependsOn downloadData
    from zipTree(dataZip), {
        include '**/tg/*.TextGrid'
        eachFile {
            it.path = it.name
        }
    }
    into "$buildDir/tg"
}

task createLab(type: Exec) {
    dependsOn extractTG
    def script = file("$scriptDir/tg_to_xwaves.praat")
    commandLine "praat", "--run", script, "$buildDir/tg"
}

task moveLab(type: Copy) {
    dependsOn createLab
    from "$rootDir/scripts/", {
        include '**/*.lab'
    }
    into "$buildDir/lab/"
    filter {
        def phoneMapping = [
                '<p:>': '_',
                'i:'  : 'i',
                'O:'  : 'O',
                '3`'  : 'r=',
                'Q'   : 'A',
                'R'   : 'r',
                'u:'  : 'u',
                'aI'  : 'AI',
                'eI'  : 'EI',
                '?' : '_',
                'h-' : 'h',
                '6' : 'r=',
                '4' : 'd',
                'I@' : 'I',
                '<usb>' : '_',
                'm=' : 'r',
                'l=' : 'l',
                'n=' : 'n',
                'a:' : 'a',
                'a' : 'A',
                'o:' : 'O',
                'y:' : 'I',
                'e' : 'E',
                'e:' : 'E',
                'E:' : 'E',
                'OY' : 'OI',
                'y' : 'I',
                'o' : 'O',
                '9' : 'V',
                'x' : 'k',
                'C' : 'S',
                'Y' : 'I',
                '2:' : 'r='
        ]
        def fields = it.tokenize()
        if (fields.size() == 3) {
            fields[-1] = phoneMapping[fields[-1]] ?: fields[-1]
        }
        fields.join(' ')
    }
    doLast {
        file("$scriptDir/").eachFileMatch(FileType.FILES, ~/.*\.lab/) { labfile ->
            file(labfile).delete()
        }
    }
}

legacyInit {
    dependsOn extractWav, extractTxt, moveLab
}

voice {
    name = 'voicebuilding2017-group2'
    gender = 'female'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == 'groovy-all') {
            details.useTarget group: details.requested.group, name: details.requested.name, version: '2.4.7'
        }
    }
}

task generateCrossvalidationInputFiles {
    def srcDir = file("$buildDir/text")
    def destDir = file("$buildDir/crossvalidation/input")
    inputs.files srcDir
    outputs.dir destDir
    doLast {
        destDir.mkdirs()
        fileTree(srcDir).include('*.txt').each { txtFile ->
            def basename = txtFile.name - '.txt'
            copy {
                from 'src/templates'
                include 'blacklist.xml'
                expand([basename: basename, text: txtFile.text])
                rename { basename + '.xml' }
                into destDir
            }
        }
    }
}

task synthesizeCrossValidationAudio {
    ext.destDir = file("$buildDir/crossvalidation/output")
    outputs.dir destDir
    doLast {
        destDir.mkdirs()
        def mary = new marytts.client.RemoteMaryInterface()
        mary.inputType = 'RAWMARYXML'
        fileTree(generateCrossvalidationInputFiles.destDir).include('*.xml').each { xmlFile ->
            def basename = xmlFile.name - '.xml'
            def doc = MaryDomUtils.parseDocument(xmlFile)
            mary.outputType = 'AUDIO'
            def audio = mary.generateAudio(doc)
            def samples = MaryAudioUtils.getSamplesAsDoubleArray(audio)
            def wavFile = file("$destDir/${basename}.wav")
            MaryAudioUtils.writeWavFile(samples, wavFile.path, audio.format)
            logger.lifecycle "Wrote $wavFile"
            def labFile = file("$destDir/${basename}.lab")
            mary.outputType = 'REALISED_DURATIONS'
            labFile.text = mary.generateText(doc)
            logger.lifecycle "Wrote $labFile"
        }
    }
}

task copyCrossValidationReferenceData(type: Copy) {
    from "$buildDir/wav", "$buildDir/lab"
    exclude 'arctic_a0018.*',
            'arctic_a0159.*',
            'arctic_a0174.*',
            'arctic_a0332.*',
            'arctic_a0350.*',
            'arctic_a0505.*',
            'arctic_a0510.*',
            'arctic_a0554.*',
            'arctic_b0004.*'
    into "$buildDir/crossvalidation/reference"
}
